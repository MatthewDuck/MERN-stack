const express = require('express');
const Duck = require('../model/Duck');
const router = express.Router();

router.get('/', async (request, response, next) => {
    response.status(200).json(await Duck.find());
});

router.get('/:id', async (request, response, next) => {
    const id = request.params.id;
    const duck = await Duck.findById(request.params.id);
    if (duck) {
        return response.json(await Duck.findById(request.params.id));
    } else {
        return next({
            statusCode: 404,
            message: `Duck with id:${id} not found`
        });
    }
});

router.post('/', async (request, response, next) => {
    if (Object.keys(request.body).length == 0) return next({
        statusCode: 400,
        message: `Body cannot be empty`
    });

    const newDuck = new Duck(request.body);
    await newDuck.save();

    response.status(201).json(newDuck);

});

router.put('/', async (request, response, next) => {
    if (Object.keys(request.body).length == 0) return next({
        statusCode: 400,
        message: `Body cannot be empty`
    });

    const duck = await Duck.updateOne({ _id: request.params.id }, request.body);

    if (duck) {
        response.status(200).json(await Duck.findById(request.params.id));
    } else {
        next({ statusCode: 404, message: `Turtle with id ${request.params.id} does not exist` });
    }
});

router.delete('/:id', async (request, response, next) => {
    const duck = await Duck.findByIdAndDelete(request.params.id);

    if (duck) {
        response.status(200).json(duck);
    } else {
        next({
            statusCode: 404,
            message: `Duck with id:${request.params.id} not found`
        });
    }
});

module.exports = router;